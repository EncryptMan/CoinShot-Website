// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  globalName    String
  username      String  @unique
  discriminator String
  avatarUrl     String?

  guilds GuildUser[]
  logs   DashboardLog[]
  connections Connection[]
}

model GuildUser {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String
  user   User   @relation(fields: [userId], references: [id])

  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])

  owner          Boolean
  permissions    Int
  newPermissions String

  @@unique([userId, guildId])
}

model Guild {
  id        String   @id @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       GuildUser[]
  logs        DashboardLog[]
  discordLogs DiscordLog[]

  guildSettings    GuildSettings?
  guildCommands    GuildCommands?
  guildAutomations GuildAutomations?

  name             String
  iconUrl          String
  memberCount      Int
  ownerId          String?
  generalChannelId String?

  botPresent  Boolean   @default(false)
  botJoinedAt DateTime?

  isPremium Boolean @default(false)
}

model GuildSettings {
  id    String @id @map("_id")
  guild Guild  @relation(fields: [id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dataSource DataSource @default(All_Exchanges)
}

enum DataSource {
  All_Exchanges
  Binance
  Bitget
  OKX
}

model GuildCommands {
  id    String @id @map("_id")
  guild Guild  @relation(fields: [id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  price          Boolean @default(true)
  chart          Boolean @default(true)
  heatmap        Boolean @default(true)
  fearGreedIndex Boolean @default(true)
  meme           Boolean @default(true)
  information    Boolean @default(true)
  watchlist      Boolean @default(true)
  convert        Boolean @default(true)
  ticTacToe      Boolean @default(true)
  news           Boolean @default(true)
  ask            Boolean @default(true)
  balance        Boolean @default(true)
}

model GuildAutomations {
  id    String @id @map("_id")
  guild Guild  @relation(fields: [id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  heatmap          Boolean @default(false)
  heatmapChannelId String?
  heatmapTimes     Int[]   @default([0])

  fearGreedIndex          Boolean @default(false)
  fearGreedIndexChannelId String?
  fearGreedIndexTimes     Int[]   @default([0])

  news             Boolean          @default(false)
  newsChannelId    String?
  newsCategories   NewsCategory[]   @default([Cryptocurrency])
  newsMessageStyle NewsMessageStyle @default(Image)
}

enum NewsCategory {
  Cryptocurrency
  Markets
  Technology
  Business
  Finance
  World
}

enum NewsMessageStyle {
  Image
  Embed
}

model DashboardLog {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  guild   Guild?  @relation(fields: [guildId], references: [id])
  guildId String?

  message String
}

model DiscordLog {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String

  user      String
  type      String
  component String
  message   String
}

model Watchlist {
  id String @id @map("_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  symbols String[]
}

model Connection {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  exchange  String
  apiKey    String
  secretKey String
  passphrase String
}
