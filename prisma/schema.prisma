// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  globalName    String
  username      String  @unique
  discriminator String
  avatarUrl     String?

  guilds         GuildUser[]
  logs           DashboardLog[]
  connections    Connection[]
  paymentGateway PaymentGateway[]
}

model GuildUser {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String
  user   User   @relation(fields: [userId], references: [id])

  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])

  owner          Boolean
  permissions    Int
  newPermissions String

  @@unique([userId, guildId])
}

model Guild {
  id        String   @id @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users          GuildUser[]
  logs           DashboardLog[]
  discordLogs    DiscordLog[]
  paymentGateway PaymentGateway[]

  guildSettings    GuildSettings?
  guildCommands    GuildCommands?
  guildAutomations GuildAutomations?
  guildCustomBot   GuildCustomBot?
  guildCustomAI    GuildCustomAI?

  name             String
  iconUrl          String
  memberCount      Int
  ownerId          String?
  generalChannelId String?

  botPresent  Boolean   @default(false)
  botJoinedAt DateTime?

  isPremium Boolean @default(false)
}

model GuildSettings {
  id    String @id @map("_id")
  guild Guild  @relation(fields: [id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dataSource DataSource @default(All_Exchanges)
}

enum DataSource {
  All_Exchanges
  Binance
  Bitget
  OKX
}

model GuildCommands {
  id    String @id @map("_id")
  guild Guild  @relation(fields: [id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  price          Boolean @default(true)
  chart          Boolean @default(true)
  heatmap        Boolean @default(true)
  fearGreedIndex Boolean @default(true)
  information    Boolean @default(true)
  watchlist      Boolean @default(true)
  convert        Boolean @default(true)
  news           Boolean @default(true)
  ask            Boolean @default(true)
  balance        Boolean @default(true)
  createInvoice  Boolean @default(true)
  walletAddress  Boolean @default(true)
}

model GuildCustomBot {
  id    String @id @map("_id")
  guild Guild  @relation(fields: [id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enabled Boolean @default(false)
  name String @default("CoinShot Premium")
  nameColor String @default("#EAC645") // Gold color
  imageUrl String?
}

model GuildCustomAI {
  id    String @id @map("_id")
  guild Guild  @relation(fields: [id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enabled       Boolean     @default(false)
  instructions  String      @default("You are a cryptocurrency discord bot named CoinShot. Use a friendly way of chatting along with some emojis. Your responses should be short and concise.")
  knowledgeBase Knowledge[]

  fetchPrice     Boolean @default(true)
  fetchNews      Boolean @default(true)
  searchInternet Boolean @default(true)
  showChart      Boolean @default(true)

  addKnowledgeChannelId String?
}

type Knowledge {
  title      String
  content    String
  embeddings String[]
}

model GuildAutomations {
  id    String @id @map("_id")
  guild Guild  @relation(fields: [id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  heatmap          Boolean @default(false)
  heatmapChannelId String?
  heatmapTimes     Int[]   @default([0])

  fearGreedIndex          Boolean @default(false)
  fearGreedIndexChannelId String?
  fearGreedIndexTimes     Int[]   @default([0])

  news             Boolean          @default(false)
  newsChannelId    String?
  newsCategories   NewsCategory[]   @default([Cryptocurrency])
  newsMessageStyle NewsMessageStyle @default(Image)
}

enum NewsCategory {
  Cryptocurrency
  Markets
  Technology
  Business
  Finance
  World
}

enum NewsMessageStyle {
  Image
  Embed
}

model DashboardLog {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  guild   Guild?  @relation(fields: [guildId], references: [id])
  guildId String?

  message String
}

model DiscordLog {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String

  user      String
  type      String
  component String
  message   String
}

model Watchlist {
  id String @id @map("_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  symbols String[]
}

model Connection {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  exchange   String
  apiKey     String
  secretKey  String
  passphrase String
}

model PaymentGateway {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])

  paymentReceiverId String
  paymentReceiver   User   @relation(fields: [paymentReceiverId], references: [id])

  name String

  messageTextContent String @default("Unlock exclusive crypto insights and perks!")
  embedTitle         String @default("Crypto Club Membership Plans")
  embedDescription   String @default("Dive deeper into the world of cryptocurrency with a plan that fits your needs. Exclusive access to insights, tips, and premium support awaits!\n\n**Join now and get started!**\n\n**Plans:**\n\nðŸ’Ž **Diamond Plan** - Ultimate access, including 1-on-1 sessions, advanced insights, and more. Perfect for the serious enthusiast.\n\nðŸš€ **Platinum Plan** - Get ahead with premium insights, direct support, and early access to new features.\n\nðŸ’° **Gold Plan** - Great for starters. Access to basic insights and community support.\n\nChoose the plan that's right for you and **unlock your crypto journey**!")
  embedColor         String @default("#F7931A") // Bitcoin orange
  embedFooter        String @default("Have questions? Reach out to our support team!")
  embedImageURL      String @default("https://res.cloudinary.com/datbbikfe/image/upload/v1720881507/CoinShot-Assets/v2vp0cebho5ljyfnfj2m.png")
  embedThumbnailURL  String @default("https://res.cloudinary.com/datbbikfe/image/upload/v1720881507/CoinShot-Assets/eit6o6xj3uy2ssrih34m.jpg")
  embedAuthor        String @default("Crypto Hub")

  buttonLabel String @default("Join Now")
  buttonStyle String @default("SUCCESS")

  plans            PaymentPlan[]
  loggingChannelId String?
}

type PaymentPlan {
  name        String
  description String
  amountUSD   Float

  successAction     SuccessAction @default(assignRole)
  assignRoleId      String?
  assignChannelId   String?
  triggerWebhookURL String?
}

enum SuccessAction {
  assignRole
  assignChannel
  triggerWebhook
}

model InviteTracking {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())

  source String
}
